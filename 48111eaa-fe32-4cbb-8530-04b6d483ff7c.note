<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Vim</title>
  <text xml:space="preserve"><note-content version="0.1">Vim

9.30
:4,10w ex2.txt

:set noincsearch

10.5	vim-latexsuite

1. <link:internal>install</link:internal>
%%set runtimepath+=/usr/share/vim/addons/
locate <link:internal>latex</link:internal>-suite
'sudo apt-get <link:internal>install</link:internal> vim-addon-manager'
'sudo vim-addons -w <link:internal>install</link:internal> <link:internal>latex</link:internal>-suite'

2. use
	templates, 
	package(F5), autocompletion 
	Placeholder&lt;C-j&gt;, 
	environment
	mathType: `p(\pi), ==( &amp;=&amp; ), `/(\frac{}{}), `8(\infty)
	\rf, za

	Compile: \ll, View DVI: \lv, \ls
		forward search in dvi: :let g:<link:internal>Tex</link:internal>_CompileRule_dvi = '<link:internal>latex</link:internal> -src-specials 					-interaction=nonstopmode $*'
				:TCTarget dvi

<bold>11.8

</bold>helptags 

<bold>Nov. 10

</bold>
新一篇: Gentoo - Portage | 旧一篇: awk笔记


=============================
help
=============================
                             PREPEND
Visual mode commands            v_
Insert mode commands            i_
Command-line commands           :
Command-line editing            c_
Options                         '   // :help 'textwidth'

=============================
editing
=============================
:g+//+s/foobar/barfoo/g     // g[lobal]默认作用范围是整个文件
:g/./,/^$/join

!5Gsort&lt;Enter&gt;
!{motion}{filter}
!!{filter}

set virtualedit=all
set virtualedit=

=============================
motion
=============================
:map &lt;Space&gt; W
g前缀使命令不是linewise的，常在wrap时和原命令有所区别

; Repeat latest f, t, F or T [count] times.
, Repeat latest f, t, F or T in opposite direction [count] times.

word WORD  w W
sentences  ( )
paragraph  { }
section ]]  ][  [[  [] // 函数"{"须在第一列
]} [{ ]) [( ]/ [/

// Text object selection
// can only be used while in Visual mode or after an operator
The commands that start with "a" select "a"n object including white space, the
commands starting with "i" select an "inner" object without white space, or
just the white space.

aw aW as ap a] a[ a) a( a&gt; a&lt; a} a{ // s for sentence &amp;&amp; p for paragraph
iw iW is ip i] i[ i) i( i&gt; i&lt; i} i{ // excluding ] [ ) ( &gt; &lt; } {

:set guioptions+=b  // 显示滚动条

ze  when 'wrap' off scroll horizontally to position the cursor at the end (right side) of the screen.
zh  when 'wrap' off scroll screen N characters to the right.
zl  when 'wrap' off scroll screen N characters to the left.
zs  when 'wrap' off scroll horizontally to position the cursor at the start (left side) of the screen.

=============================
motion-II
=============================
CTRL-O Go to [count] Older cursor position in jump list (not a motion command). 
CTRL-I Go to [count] newer cursor position in jump list (not a motion command). 

=============================
programming
=============================
:tags   // 显示tag stack
:tag {tagname} // 缺省时至stack的top
CTRL-]
:ptag tagname // preview
CTRL-W }
:pclose
:pedit
:psearch
:stag tagname
CTRL-W ]
CTRL-T

:set tags=./tags,./../tags,./*/tags
:set tags=./*/tags
:!ctags -R *

:tnext
:tselect tagname
:tag /block 再按tab补齐

[i  // 第一个匹配项
[I  // [&lt;Tab&gt; 跳转到[I找到的第一条匹配项
]I  // start at the current cursor position
[D  // 宏定义

:set path+=d:\mingw\include\*
:checkpath

=============================
text formatting
=============================
:set cindent shiftwidth=4
gg=G
:set textwidth=80

&lt;CTRL-V&gt; // &lt;CTRL-Q&gt; for Windows
Istring&lt;Esc&gt;
cstring&lt;Esc&gt;

:center // :{range}center [width]
:right

=============================
map     command     autocmd
=============================
:omap &lt;F7&gt; a{
:map &lt;F3&gt; oDate: &lt;Esc&gt;:read !date&lt;CR&gt;kJ
   
:command -nargs=* DoIt :call AFunction(&lt;f-args&gt;)

:autocmd [group] {events} {file_pattern} [nested] {command}

:augroup cprograms
: autocmd BufReadPost *.c,*.h :set sw=4 sts=4
: autocmd BufReadPost *.cpp :set sw=3 sts=3
:augroup END

:autocmd! cprograms   //删除


=============================
vim-script
=============================
b:name    buffer variable
w:name    window variable
g:name    global variable (also in a function)
v:name    variable predefined by Vim
s:name    script variable
l:name    local variable
a:name    function argument

$NAME     environment variable
&amp;name     option
@r        register

:execute "tag " . tag_name // . for cancatenate
---&gt; :tag tag_name
:normal gg=G
:execute "normal " . normal_commands
:execute "normal Inew text \&lt;Esc&gt;"

=============================
useful links for VIM scripts
=============================
c.vim              <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=213</link:url>
        -------
        Setting
        -------
        see doc
        -------
        Usage
        -------
        &lt;A-F9&gt; save and compile
        &lt;F9&gt;   link
        &lt;C-F9&gt; run

taglist.vim        <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=273</link:url>
        -------
        Notes
        -------
        noremap &lt;silent&gt; &lt;F11&gt;  &lt;Esc&gt;&lt;Esc&gt;:Tlist&lt;CR&gt;
        inoremap &lt;silent&gt; &lt;F11&gt;  &lt;Esc&gt;&lt;Esc&gt;:Tlist&lt;CR&gt;
        -------
        Usage
        -------
        &lt;CR&gt;          Jump to the location where the tag under cursor is
                       defined.
         o             Jump to the location where the tag under cursor is
                       defined in a new window.
         p             Display the tag definition in the file window and
                       keep the cursor in the taglist window itself.
         &lt;Space&gt;       Display the prototype of the tag under the cursor.
         u             Update the tags listed in the taglist window
         s             Change the sort order of the tags (by name or by order)
         d             Remove the tags for the file under the cursor
         x             Zoom-in or Zoom-out the taglist window
         +             Open a fold
         -             Close a fold
         *             Open all folds
         =             Close all folds
         [[            Jump to the beginning of the previous file
         &lt;Backspace&gt;   Jump to the beginning of the previous file
         ]]            Jump to the beginning of the next file
         &lt;Tab&gt;         Jump to the beginning of the next file

EnhCommentify.vim  <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=23</link:url>
        -------
        Setting
        -------
        let g:EnhCommentifyRespectIndent = 'yes'
        let g:EnhCommentifyPretty        = 'yes'
        let g:EnhCommentifyAlignRight    = 'yes'
        -------
        Usage
        -------
        \x  \c

bufexplorer.zip    <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=42</link:url>
        -------
        Notes
        -------
        Needed by winmanager
        -------
        Usage
        -------
        \be \bs

winmanager         <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=95</link:url>
        -------
        Notes
        -------
        noremap &lt;silent&gt; &lt;F4&gt;  &lt;Esc&gt;&lt;Esc&gt;:WMToggle&lt;CR&gt;
        inoremap &lt;silent&gt; &lt;F4&gt;  &lt;Esc&gt;&lt;Esc&gt;:WMToggle&lt;CR&gt;
        -------
        Usage
        -------
        :WManager :WMClose :WMToggle

        1: File Explorer Area
        &lt;tab&gt; : open the file or directory in a new window in the FileEditing area.
        c : change the pwd to the directory currently displayed
        C : change the currently displayed directory to pwd (converse of c)
        s : select sort field (size, date, name)
        r : reverse direction of sort
        R : rename file
        D : delete file
        - : move up one level
       

cppcomplete        <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=527</link:url>
        -------
        Notes
        -------
        default mapping of &lt;F9&gt; conflicts with c.vim
        &lt;F8&gt; &lt;F9&gt; --&gt; &lt;F7&gt; &lt;F8&gt;
        -------
        Usage
        -------
        &lt;A-j&gt; &lt;A-l&gt; &lt;F7&gt; &lt;F8&gt; &lt;F5&gt;

a.vim              <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=31</link:url>
        -------
        Usage
        -------
        :A :AS :AV

borland.vim        <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=92</link:url>
        -------
        Usage
        -------
        :colorscheme borland

xmledit            <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=301</link:url>
cvsmenu.vim        <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=58</link:url>
project.tar.gz     <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=69</link:url>
grep.vim           <link:url>http://vim.sourceforge.net/scripts/script.php?script_id=311</link:url>

<bold>Nov. 28

</bold>*, #
`` '' `.
@
&lt;&lt; &gt;&gt;
&lt;10&lt; &gt;10&gt; 
, ;
Commands in vi/vim are meant to be combined
 '.' command repeats the last complete, combined editing command 
'AHello&lt;Esc&gt;' . . .
'ceHello&lt;Esc&gt;&gt;' ...
The vi command architecture was key here, together with the fact that &lt;backspace&gt; is as part of the editing sequence as regular typing, and the editing operations being pretty repetitive. 
c%
'di&gt;': "delete inner angle-block"
da), da&gt;, da{
H, M, L and zt, zz, zb
']]' and the likes to navigate by functions

since you are thinking 90% of the time, and editing 10%, the productivity gain might be there, but it's useless anyway

 indenting a block
'&gt;aB' ("indent a Block")
Powerful asterisk!
Lovely upper case:gU

<bold>Dec. 1

</bold>i_CTRL-X
i_CTRL-Y
i_CTRL-E
/^\n\{3} : 匹配3个连续的空行
gf
&lt;C-X&gt;&lt;C-L&gt;
/&lt;C-R&gt;&lt;C-W&gt; : 把单个&lt;cword&gt;单词放入搜索或者命令行
/&lt;C-R&gt;&lt;C-A&gt; : 把字符串中有的单词&lt;cword&gt;放入搜索或者命令行
:h regexp&lt;C-D&gt; : 按ctrl+d得到包含regexp的列表(按tab自动补齐)
:lcd %:p:h : 改变路径到当前编辑的文件
:Sex(plore) : 分割窗口浏览文件

▼转换大小写
guu : 将整行的字母转换成小写
gUU : 将整行的字母转换成大写
Vu : 转换选中的行（小写）
VU : 转换选中的行（大写）
g~~ : 反向转换
vEU : 转换词大写，v表示进入可视模式，E表示覆盖到词的末尾，U表示大写。
vE~ : 反向转换词
ggguG : 将当前编辑文件内容全部转换成小写

▼几个彩蛋，有意思
:h 42 : (还有 <link:url>http://www.google.com/search?q=42</link:url>)
:h holy-grail
:h!

ga : 显示当前光标下单个字的ascii码，十进制，十六进制……
▼标记 &amp; 移动
'. : 跳回最后编辑的行 (超有用)
`. : 同上，但是定位编辑点
g; : 跳转到比较旧的编辑位置（如果有的话） (vim6.3后的新功能)
g, : 这个是较新的位置 (同上)
:changes : 打出改变列表
:h changelist : 查看“改变表跳转”的帮助
&lt;C-O&gt; : 依次沿着你的跳转记录向回跳 (从最近的一次开始)
&lt;C-I&gt; : 依次沿着你的跳转记录向前跳
:ju(mps) : 列出跳转轨迹
:help jump-motions
:<link:internal>history</link:internal> : 列出历史记录
:his c : 命令行历史
:his s : 搜索历史
q/ : 搜索命令历史的窗口
q: : 命令行命令历史的窗口
:&lt;C-F&gt; : 历史窗口

<bold>Dec. 2

</bold>:buffers
:bp
:bn
▼把对象送到命令行或者搜索行
&lt;C-R&gt;&lt;C-W&gt; : 执行当前光标下的单个单词
&lt;C-R&gt;&lt;C-A&gt; : 执行当前光标下尽可能多的单词
&lt;C-R&gt;- : 送至一个小型寄存器（同样使用于插入模式）
&lt;C-R&gt;[0-9a-z] : 送至一个命名寄存器 (括弧同上)
&lt;C-R&gt;% : 送至文件名(#也行) (同上)
&lt;C-R&gt;=somevar : 送至一个变量 (例如 :let sray="ray[0-9]")

<bold>Dec. 3

</bold>1. GBK locale下写utf8文档的简便方法: 
in .vimrc, add:
set encoding=prc
set fileencoding=utf-8

2. in vi, add 2 spaces before the lines of 12-35
:12,35s/^/ / 

3. When openning a file, always jump to the last cursor position:
in .vimrc, add:
autocmd <link:broken>BufReadPost</link:broken> * if line("'\"") &amp;&amp; line("'\"") &lt;= line("$") | exe "normal
 `\"" | endif

5. automatically update the updating time in html:
in .vimrc, add:
"""""""""""""""""""""""""""""""""""""""""""""""""""
"time
" Let F7 insert current time to current location.
" map &lt;F7&gt; i&lt;C-R&gt;=strftime("%Y-%m-%d %H:%M:%S")&lt;RETURN&gt;&lt;ESC&gt;
map! &lt;F7&gt; &lt;C-R&gt;=strftime("%Y-%m-%d %H:%M:%S")&lt;RETURN&gt;
                                                                              
  
fun! <link:broken>UpdateTimestamp</link:broken>()
    if &amp;modified
        normal mnHmm`n
        silent :%s/\(\(\([Tt]ime-\=[Ss]tamp\)\|\([Ll]ast[- ]\=[Uu]pdate\)\): [
^A-Za-z0-9: -"']\=[&lt;"'][^&lt;&gt;A-Za-z0-9: -"']\=\)[0-9: -]*\([^&lt;&gt;A-Za-z0-9: -"']\=
[&gt;"'][^A-Za-z0-9: "']\=\)/\=submatch(1) . strftime("%Y-%m-%d %H:%M:%S") . subm
atch(5)/e
        normal 'mzt`n
    endif
endfunction

  autocmd <link:broken>BufWritePre</link:broken>,<link:broken>FileWritePre</link:broken>,<link:broken>FileAppendPre</link:broken> * call <link:broken>UpdateTimestamp</link:broken>()
"""""""""""""""""""""""""""""""""""""""""""""""""""
in html, add the time formated as:
Last Update: &lt;****-**-** **:**:**&gt;

<bold>

</bold>




</note-content></text>
  <last-change-date>2008-12-03T08:21:15.6647650+08:00</last-change-date>
  <last-metadata-change-date>2008-12-03T08:21:15.6647650+08:00</last-metadata-change-date>
  <create-date>2008-09-30T21:27:26.9134260+08:00</create-date>
  <cursor-position>9754</cursor-position>
  <width>504</width>
  <height>382</height>
  <x>295</x>
  <y>191</y>
  <tags>
    <tag>system:notebook:日积月累</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>